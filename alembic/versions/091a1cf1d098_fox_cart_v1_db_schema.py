"""fox_cart_v1 db schema.

Revision ID: 091a1cf1d098
Revises: 
Create Date: 2025-09-22 21:27:54.856067

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '091a1cf1d098'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('gst_rates',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('hsn_code', sa.String(length=10), nullable=False),
    sa.Column('rate', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('hsn_code')
    )
    op.create_index(op.f('ix_gst_rates_id'), 'gst_rates', ['id'], unique=False)
    op.create_table('product_categories',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_product_categories_id'), 'product_categories', ['id'], unique=False)
    op.create_table('shop_types',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_shop_types_id'), 'shop_types', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('fcm_token', sa.String(length=255), nullable=True),
    sa.Column('full_name', sa.String(length=150), nullable=True),
    sa.Column('profile_pic', sa.String(length=255), nullable=True),
    sa.Column('role', sa.Enum('VENDOR', 'CUSTOMER', name='userrole'), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('carts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_carts_user_id'), 'carts', ['user_id'], unique=False)
    op.create_table('vendors',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('gst_number', sa.String(length=50), nullable=True),
    sa.Column('logo', sa.String(length=255), nullable=True),
    sa.Column('name', sa.String(length=150), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=True),
    sa.Column('slug', sa.String(length=150), nullable=False),
    sa.Column('website', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('slug')
    )
    op.create_index(op.f('ix_vendors_owner_id'), 'vendors', ['owner_id'], unique=True)
    op.create_table('contact_details',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('contact_type', sa.String(length=50), nullable=False),
    sa.Column('is_primary', sa.Boolean(), nullable=True),
    sa.Column('phone_number', sa.String(length=255), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('vendor_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['vendor_id'], ['vendors.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_contact_details_id'), 'contact_details', ['id'], unique=False)
    op.create_index(op.f('ix_contact_details_user_id'), 'contact_details', ['user_id'], unique=False)
    op.create_index(op.f('ix_contact_details_vendor_id'), 'contact_details', ['vendor_id'], unique=False)
    op.create_table('location_details',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('address_line1', sa.String(length=255), nullable=False),
    sa.Column('address_line2', sa.String(length=255), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('country', sa.String(length=100), nullable=True),
    sa.Column('label', sa.String(length=100), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('postal_code', sa.String(length=20), nullable=True),
    sa.Column('state', sa.String(length=100), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('vendor_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['vendor_id'], ['vendors.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_location_details_id'), 'location_details', ['id'], unique=False)
    op.create_index(op.f('ix_location_details_user_id'), 'location_details', ['user_id'], unique=False)
    op.create_index(op.f('ix_location_details_vendor_id'), 'location_details', ['vendor_id'], unique=False)
    op.create_table('orders',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('customer_id', sa.UUID(), nullable=True),
    sa.Column('vendor_id', sa.UUID(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'SHIPPED', 'OUT_FOR_DELIVERY', 'DELIVERED', 'CANCELLED', name='orderstatus'), nullable=True),
    sa.Column('subtotal_amount', sa.Float(), nullable=False),
    sa.Column('discount_amount', sa.Float(), nullable=True),
    sa.Column('invoice_amount', sa.Float(), nullable=False),
    sa.Column('final_amount', sa.Float(), nullable=False),
    sa.Column('gst_rate', sa.Float(), nullable=False),
    sa.Column('cgst_amount', sa.Float(), nullable=True),
    sa.Column('sgst_amount', sa.Float(), nullable=True),
    sa.Column('igst_amount', sa.Float(), nullable=True),
    sa.Column('total_tax_amount', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['vendor_id'], ['vendors.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_orders_customer_id'), 'orders', ['customer_id'], unique=False)
    op.create_index(op.f('ix_orders_id'), 'orders', ['id'], unique=False)
    op.create_index(op.f('ix_orders_vendor_id'), 'orders', ['vendor_id'], unique=False)
    op.create_table('products',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('base_price', sa.Float(), nullable=False),
    sa.Column('category_id', sa.UUID(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('gst_rate_id', sa.UUID(), nullable=False),
    sa.Column('image_url', sa.String(length=255), nullable=True),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('product_metadata', sa.JSON(), nullable=True),
    sa.Column('stock', sa.Integer(), nullable=True),
    sa.Column('vendor_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['product_categories.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['gst_rate_id'], ['gst_rates.id'], ),
    sa.ForeignKeyConstraint(['vendor_id'], ['vendors.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_products_category_id'), 'products', ['category_id'], unique=False)
    op.create_index(op.f('ix_products_id'), 'products', ['id'], unique=False)
    op.create_index(op.f('ix_products_vendor_id'), 'products', ['vendor_id'], unique=False)
    op.create_table('vendor_shop_types',
    sa.Column('vendor_id', sa.UUID(), nullable=False),
    sa.Column('shop_type_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['shop_type_id'], ['shop_types.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['vendor_id'], ['vendors.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('vendor_id', 'shop_type_id')
    )
    op.create_table('cart_items',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('cart_id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['cart_id'], ['carts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cart_items_cart_id'), 'cart_items', ['cart_id'], unique=False)
    op.create_index(op.f('ix_cart_items_product_id'), 'cart_items', ['product_id'], unique=False)
    op.create_table('order_items',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('discount_amount', sa.Float(), nullable=True),
    sa.Column('discount_percentage', sa.Float(), nullable=True),
    sa.Column('order_id', sa.UUID(), nullable=True),
    sa.Column('invoice_amount', sa.Float(), nullable=False),
    sa.Column('gst_rate', sa.Float(), nullable=False),
    sa.Column('cgst_amount', sa.Float(), nullable=True),
    sa.Column('sgst_amount', sa.Float(), nullable=True),
    sa.Column('igst_amount', sa.Float(), nullable=True),
    sa.Column('total_tax_amount', sa.Float(), nullable=True),
    sa.Column('product_id', sa.UUID(), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('total_price', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_order_items_id'), 'order_items', ['id'], unique=False)
    op.create_index(op.f('ix_order_items_order_id'), 'order_items', ['order_id'], unique=False)
    op.create_index(op.f('ix_order_items_product_id'), 'order_items', ['product_id'], unique=False)
    op.create_table('order_refund_requests',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('processed_by', sa.UUID(), nullable=True),
    sa.Column('reason', sa.Text(), nullable=True),
    sa.Column('refund_amount', sa.Float(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'APPROVED', 'REJECTED', 'REFUNDED', name='refundstatus'), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['processed_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_order_refund_requests_id'), 'order_refund_requests', ['id'], unique=False)
    op.create_index(op.f('ix_order_refund_requests_order_id'), 'order_refund_requests', ['order_id'], unique=False)
    op.create_index(op.f('ix_order_refund_requests_processed_by'), 'order_refund_requests', ['processed_by'], unique=False)
    op.create_index(op.f('ix_order_refund_requests_user_id'), 'order_refund_requests', ['user_id'], unique=False)
    op.create_table('order_tracking',
    sa.Column('location_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('changed_by', sa.UUID(), nullable=True),
    sa.Column('note', sa.Text(), nullable=True),
    sa.Column('order_id', sa.UUID(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['changed_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['location_id'], ['location_details.id'], ),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_order_tracking_changed_by'), 'order_tracking', ['changed_by'], unique=False)
    op.create_index(op.f('ix_order_tracking_id'), 'order_tracking', ['id'], unique=False)
    op.create_index(op.f('ix_order_tracking_location_id'), 'order_tracking', ['location_id'], unique=False)
    op.create_index(op.f('ix_order_tracking_order_id'), 'order_tracking', ['order_id'], unique=False)
    op.create_table('payments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('method', sa.String(length=50), nullable=False),
    sa.Column('order_id', sa.UUID(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('transaction_id', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('transaction_id')
    )
    op.create_index(op.f('ix_payments_id'), 'payments', ['id'], unique=False)
    op.create_index(op.f('ix_payments_order_id'), 'payments', ['order_id'], unique=False)
    op.create_table('product_vectors',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('embedding', sa.Text(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_product_vectors_id'), 'product_vectors', ['id'], unique=False)
    op.create_index(op.f('ix_product_vectors_product_id'), 'product_vectors', ['product_id'], unique=True)
    # USERS
    op.execute("""
        ALTER TABLE users ENABLE ROW LEVEL SECURITY;
        CREATE POLICY "Users can view their own profile"
        ON users FOR SELECT USING (id = auth.uid());
        CREATE POLICY "Users can modify their own profile"
        ON users FOR UPDATE USING (id = auth.uid());
        CREATE POLICY "Users can delete their own profile"
        ON users FOR DELETE USING (id = auth.uid());
    """)

    # SHOP_TYPES
    op.execute("""
        ALTER TABLE shop_types ENABLE ROW LEVEL SECURITY;
        CREATE POLICY "Anyone can view shop types"
        ON shop_types FOR SELECT USING (true);
    """)

    # VENDORS
    op.execute("""
        ALTER TABLE vendors ENABLE ROW LEVEL SECURITY;
        CREATE POLICY "Users can view their own profile"
        ON vendors FOR SELECT USING (owner_id = auth.uid());
        CREATE POLICY "Users can modify their own profile"
        ON vendors FOR UPDATE USING (owner_id = auth.uid());
        CREATE POLICY "Users can delete their own profile"
        ON vendors FOR DELETE USING (owner_id = auth.uid());
    """)

    # CONTACT_DETAILS
    op.execute("""
        ALTER TABLE contact_details ENABLE ROW LEVEL SECURITY;
        CREATE POLICY "Users can view and manage their contacts"
        ON contact_details FOR ALL
        USING (user_id = auth.uid() OR vendor_id IN (SELECT id FROM vendors WHERE owner_id = auth.uid()))
        WITH CHECK (user_id = auth.uid() OR vendor_id IN (SELECT id FROM vendors WHERE owner_id = auth.uid()));
    """)

    # LOCATION_DETAILS
    op.execute("""
        ALTER TABLE location_details ENABLE ROW LEVEL SECURITY;
        CREATE POLICY "Users can view and manage their locations"
        ON location_details FOR ALL
        USING (user_id = auth.uid() OR vendor_id IN (SELECT id FROM vendors WHERE owner_id = auth.uid()))
        WITH CHECK (user_id = auth.uid() OR vendor_id IN (SELECT id FROM vendors WHERE owner_id = auth.uid()));
    """)

    # PRODUCTS
    op.execute("""
        ALTER TABLE products ENABLE ROW LEVEL SECURITY;
        CREATE POLICY "Vendors manage their products"
        ON products FOR ALL USING (vendor_id IN (SELECT id FROM vendors WHERE owner_id = auth.uid()));
        CREATE POLICY "Anyone can view active products"
        ON products FOR SELECT USING (active = true);
    """)

    # PRODUCT_CATEGORIES
    op.execute("""
        ALTER TABLE product_categories ENABLE ROW LEVEL SECURITY;
        CREATE POLICY "Anyone can view categories"
        ON product_categories FOR SELECT USING (true);
    """)

    # PRODUCT_VECTORS
    op.execute("""
        ALTER TABLE product_vectors ENABLE ROW LEVEL SECURITY;
        CREATE POLICY "Anyone can view vectors for active products"
        ON product_vectors FOR SELECT
        USING (product_id IN (SELECT id FROM products WHERE active = true));
        CREATE POLICY "Vendors manage their product vectors"
        ON product_vectors FOR ALL
        USING (product_id IN (SELECT id FROM products WHERE vendor_id IN (SELECT id FROM vendors WHERE owner_id = auth.uid())))
        WITH CHECK (product_id IN (SELECT id FROM products WHERE vendor_id IN (SELECT id FROM vendors WHERE owner_id = auth.uid())));
    """)

    # ORDERS
    op.execute("""
        ALTER TABLE orders ENABLE ROW LEVEL SECURITY;
        CREATE POLICY "Customers see their orders"
        ON orders FOR SELECT USING (customer_id = auth.uid());
        CREATE POLICY "Customers can create orders"
        ON orders FOR INSERT WITH CHECK (customer_id = auth.uid());
        CREATE POLICY "Vendors see their shop orders"
        ON orders FOR SELECT USING (vendor_id IN (SELECT id FROM vendors WHERE owner_id = auth.uid()));
        CREATE POLICY "Vendors Modify their shop orders"
        ON orders FOR UPDATE USING (vendor_id IN (SELECT id FROM vendors WHERE owner_id = auth.uid()));
    """)

    # ORDER_ITEMS
    op.execute("""
        ALTER TABLE order_items ENABLE ROW LEVEL SECURITY;
        CREATE POLICY "Order owners can view and modify items"
        ON order_items FOR ALL
        USING (order_id IN (SELECT id FROM orders WHERE customer_id = auth.uid()
        OR vendor_id IN (SELECT id FROM vendors WHERE owner_id = auth.uid())));
    """)

    # PAYMENTS
    op.execute("""
        ALTER TABLE payments ENABLE ROW LEVEL SECURITY;
        CREATE POLICY "Order owners can view payments"
        ON payments FOR SELECT
        USING (order_id IN (SELECT id FROM orders WHERE customer_id = auth.uid()
        OR vendor_id IN (SELECT id FROM vendors WHERE owner_id = auth.uid())));
        CREATE POLICY "Customers can create payments for their orders"
        ON payments FOR INSERT
        WITH CHECK (order_id IN (SELECT id FROM orders WHERE customer_id = auth.uid()));
        CREATE POLICY "Order owners can modify payments"
        ON payments FOR UPDATE
        USING (order_id IN (SELECT id FROM orders WHERE customer_id = auth.uid()
        OR vendor_id IN (SELECT id FROM vendors WHERE owner_id = auth.uid())));
    """)

    # ORDER_TRACKING
    op.execute("""
        ALTER TABLE order_tracking ENABLE ROW LEVEL SECURITY;
        CREATE POLICY "Customers see tracking for their orders"
        ON order_tracking FOR SELECT
        USING (order_id IN (SELECT id FROM orders WHERE customer_id = auth.uid()));
        CREATE POLICY "Vendors update tracking for their orders"
        ON order_tracking FOR ALL
        USING (order_id IN (SELECT id FROM orders WHERE vendor_id IN (SELECT id FROM vendors WHERE owner_id = auth.uid())))
        WITH CHECK (order_id IN (SELECT id FROM orders WHERE vendor_id IN (SELECT id FROM vendors WHERE owner_id = auth.uid())));
    """)

    # ORDER_REFUND_REQUESTS
    op.execute("""
        ALTER TABLE order_refund_requests ENABLE ROW LEVEL SECURITY;
        CREATE POLICY "Users can create refund requests"
        ON order_refund_requests FOR INSERT
        WITH CHECK (user_id = auth.uid());
        CREATE POLICY "Users can view their refund requests"
        ON order_refund_requests FOR SELECT
        USING (user_id = auth.uid());
        CREATE POLICY "Vendors can view refund requests for their orders"
        ON order_refund_requests FOR SELECT
        USING (EXISTS (SELECT 1 FROM orders o
                       JOIN vendors v ON v.id = o.vendor_id
                       WHERE o.id = order_refund_requests.order_id
                       AND v.owner_id = auth.uid()));
        CREATE POLICY "Vendors can update refund requests for their orders"
        ON order_refund_requests FOR UPDATE
        USING (EXISTS (SELECT 1 FROM orders o
                       JOIN vendors v ON v.id = o.vendor_id
                       WHERE o.id = order_refund_requests.order_id
                       AND v.owner_id = auth.uid()));
    """)

    # CARTS
    op.execute("""
        ALTER TABLE carts ENABLE ROW LEVEL SECURITY;
        CREATE POLICY "Users can view and modify their own cart"
        ON carts FOR ALL USING (user_id = auth.uid());
    """)

    # CART_ITEMS
    op.execute("""
        ALTER TABLE cart_items ENABLE ROW LEVEL SECURITY;
        CREATE POLICY "Users can view and modify their cart items"
        ON cart_items FOR ALL
        USING (EXISTS (SELECT 1 FROM carts WHERE carts.id = cart_items.cart_id AND carts.user_id = auth.uid()));
    """)

    # GST_RATES
    op.execute("""
        ALTER TABLE gst_rates ENABLE ROW LEVEL SECURITY;
        CREATE POLICY "Anyone can view GST Rates"
        ON gst_rates FOR SELECT USING (true);
    """)
    
    # vendor_shop_types (no RLS needed as it's a join table)
    op.execute("""
    ALTER TABLE vendor_shop_types ENABLE ROW LEVEL SECURITY;

    CREATE POLICY "Vendors can view their shop types"
    ON vendor_shop_types
    FOR SELECT
    USING (
    vendor_id IN (
        SELECT id FROM vendors WHERE owner_id = auth.uid()
    )
    );

    CREATE POLICY "Vendors can add their shop types"
    ON vendor_shop_types
    FOR INSERT
    WITH CHECK (
    vendor_id IN (
        SELECT id FROM vendors WHERE owner_id = auth.uid()
    )
    );

    CREATE POLICY "Vendors can remove their shop types"
    ON vendor_shop_types
    FOR DELETE
    USING (
    vendor_id IN (
        SELECT id FROM vendors WHERE owner_id = auth.uid()
    )
    );

    CREATE POLICY "Anyone can view vendor-shop links"
    ON vendor_shop_types
    FOR SELECT
    USING (true);
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_product_vectors_product_id'), table_name='product_vectors')
    op.drop_index(op.f('ix_product_vectors_id'), table_name='product_vectors')
    op.drop_table('product_vectors')
    op.drop_index(op.f('ix_payments_order_id'), table_name='payments')
    op.drop_index(op.f('ix_payments_id'), table_name='payments')
    op.drop_table('payments')
    op.drop_index(op.f('ix_order_tracking_order_id'), table_name='order_tracking')
    op.drop_index(op.f('ix_order_tracking_location_id'), table_name='order_tracking')
    op.drop_index(op.f('ix_order_tracking_id'), table_name='order_tracking')
    op.drop_index(op.f('ix_order_tracking_changed_by'), table_name='order_tracking')
    op.drop_table('order_tracking')
    op.drop_index(op.f('ix_order_refund_requests_user_id'), table_name='order_refund_requests')
    op.drop_index(op.f('ix_order_refund_requests_processed_by'), table_name='order_refund_requests')
    op.drop_index(op.f('ix_order_refund_requests_order_id'), table_name='order_refund_requests')
    op.drop_index(op.f('ix_order_refund_requests_id'), table_name='order_refund_requests')
    op.drop_table('order_refund_requests')
    op.drop_index(op.f('ix_order_items_product_id'), table_name='order_items')
    op.drop_index(op.f('ix_order_items_order_id'), table_name='order_items')
    op.drop_index(op.f('ix_order_items_id'), table_name='order_items')
    op.drop_table('order_items')
    op.drop_index(op.f('ix_cart_items_product_id'), table_name='cart_items')
    op.drop_index(op.f('ix_cart_items_cart_id'), table_name='cart_items')
    op.drop_table('cart_items')
    op.drop_table('vendor_shop_types')
    op.drop_index(op.f('ix_products_vendor_id'), table_name='products')
    op.drop_index(op.f('ix_products_id'), table_name='products')
    op.drop_index(op.f('ix_products_category_id'), table_name='products')
    op.drop_table('products')
    op.drop_index(op.f('ix_orders_vendor_id'), table_name='orders')
    op.drop_index(op.f('ix_orders_id'), table_name='orders')
    op.drop_index(op.f('ix_orders_customer_id'), table_name='orders')
    op.drop_table('orders')
    op.drop_index(op.f('ix_location_details_vendor_id'), table_name='location_details')
    op.drop_index(op.f('ix_location_details_user_id'), table_name='location_details')
    op.drop_index(op.f('ix_location_details_id'), table_name='location_details')
    op.drop_table('location_details')
    op.drop_index(op.f('ix_contact_details_vendor_id'), table_name='contact_details')
    op.drop_index(op.f('ix_contact_details_user_id'), table_name='contact_details')
    op.drop_index(op.f('ix_contact_details_id'), table_name='contact_details')
    op.drop_table('contact_details')
    op.drop_index(op.f('ix_vendors_owner_id'), table_name='vendors')
    op.drop_table('vendors')
    op.drop_index(op.f('ix_carts_user_id'), table_name='carts')
    op.drop_table('carts')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_shop_types_id'), table_name='shop_types')
    op.drop_table('shop_types')
    op.drop_index(op.f('ix_product_categories_id'), table_name='product_categories')
    op.drop_table('product_categories')
    op.drop_index(op.f('ix_gst_rates_id'), table_name='gst_rates')
    op.drop_table('gst_rates')
    op.execute("DROP POLICY IF EXISTS \"Users can view their own profile\" ON users;")
    op.execute("DROP POLICY IF EXISTS \"Users can modify their own profile\" ON users;")
    op.execute("DROP POLICY IF EXISTS \"Users can delete their own profile\" ON users;")
    op.execute("DROP POLICY IF EXISTS \"Anyone can view shop types\" ON shop_types;")
    op.execute("DROP POLICY IF EXISTS \"Users can view their own profile\" ON vendors;")
    op.execute("DROP POLICY IF EXISTS \"Users can modify their own profile\" ON vendors;")
    op.execute("DROP POLICY IF EXISTS \"Users can delete their own profile\" ON vendors;")
    op.execute("DROP POLICY IF EXISTS \"Users can view and manage their contacts\" ON contact_details;")
    op.execute("DROP POLICY IF EXISTS \"Users can view and manage their locations\" ON location_details;")
    op.execute("DROP POLICY IF EXISTS \"Vendors manage their products\" ON products;")
    op.execute("DROP POLICY IF EXISTS \"Anyone can view active products\" ON products;")
    op.execute("DROP POLICY IF EXISTS \"Anyone can view categories\" ON product_categories;")
    op.execute("DROP POLICY IF EXISTS \"Anyone can view vectors for active products\" ON product_vectors;")
    op.execute("DROP POLICY IF EXISTS \"Vendors manage their product vectors\" ON product_vectors;")
    op.execute("DROP POLICY IF EXISTS \"Customers see their orders\" ON orders;")
    op.execute("DROP POLICY IF EXISTS \"Customers can create orders\" ON orders;")
    op.execute("DROP POLICY IF EXISTS \"Vendors see their shop orders\" ON orders;")
    op.execute("DROP POLICY IF EXISTS \"Vendors Modify their shop orders\" ON orders;")
    op.execute("DROP POLICY IF EXISTS \"Order owners can view and modify items\" ON order_items;")
    op.execute("DROP POLICY IF EXISTS \"Order owners can view payments\" ON payments;")
    op.execute("DROP POLICY IF EXISTS \"Customers can create payments for their orders\" ON payments;")
    op.execute("DROP POLICY IF EXISTS \"Order owners can modify payments\" ON payments;")
    op.execute("DROP POLICY IF EXISTS \"Customers see tracking for their orders\" ON order_tracking;")
    op.execute("DROP POLICY IF EXISTS \"Vendors update tracking for their orders\" ON order_tracking;")
    op.execute("DROP POLICY IF EXISTS \"Users can create refund requests\" ON order_refund_requests;")
    op.execute("DROP POLICY IF EXISTS \"Users can view their refund requests\" ON order_refund_requests;")
    op.execute("DROP POLICY IF EXISTS \"Vendors can view refund requests for their orders\" ON order_refund_requests;")
    op.execute("DROP POLICY IF EXISTS \"Vendors can update refund requests for their orders\" ON order_refund_requests;")
    op.execute("DROP POLICY IF EXISTS \"Users can view and modify their own cart\" ON carts;")
    op.execute("DROP POLICY IF EXISTS \"Users can view and modify their cart items\" ON cart_items;")
    op.execute("DROP POLICY IF EXISTS \"Anyone can view GST Rates\" ON gst_rates;")
    # ### end Alembic commands ###
